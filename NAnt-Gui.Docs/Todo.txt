Required for 1.9/2.0
--------------------
- BUG: Installed app doesn't always seem to close
- Filewatcher 	
	* File deleted:
		- If the user selects yes, it keeps asking and keeps adding asterisks
		- If the user selects no, it crashes because the document dictionary is modify during enumeration
		- Ensure that when the file is deleted and kept open, the user is prompted for save upon close
	* When the user declines to reload a changed file, it should not prompt again
	* User should only be prompted about file changes when the application has focus.
- Fix all UI events.  
	* Reload should be disabled when a new document is created	
	* If no documents are opened, close, save, save as, and reload should be disabled
	* Documents that are changes should have * next to the name
- If the file is readonly, make the editor readonly
- Make my own XmlEditorControl so I don't have to repeatedly modify sharpdevelop's code 
	(might not work because I had to modify more than the control)
	
(DONE): BUG: new file saved with save as isn't marked as existing	
(DONE): Filewatcher: Saving the document changes which targets are selected (caused by filewatcher firing during save)
(DONE): Filewatcher: should prompt the user, when the file changes, if they want to reload it
(DONE): Filewatcher: Rewrite to use Application.Idle polling technique instead
(DONE): BUG: New project doesn't prompt for save on close.
(DONE): BUG: New project doesn't work.  Filewatcher failes.
(DONE): BUG: Errors when loading/saving a file are not caught
(DONE): Figure out why tabcompletion doesn't work on the xmlcontrol
(DONE): Figure out why folding doesn't work on the xmlcontrol
(DONE): Closing the app while running a build throws a "cannot access disposed object" in OutputWindow.WriteOutput
(DONE): Active document should be checked
(DONE): Clicking the menuitem shouldn't reload the document
(DONE): Window menu that lists all open tabs
(DONE): create it in the controller and pass it into the NAntDocument.  The window isn't the right place for it, but it's there
	    because it needs a control to synchronize the threading
(DONE): Add save all menu item and toolstrip button
(DONE): Closing multiple tabs that require saving works just like SharpDevelop (cancel is only valid for current document)
(DONE): Implement Run menuitem on the targets tree
(DONE): Implement tool tip on targets tree
(DONE): Add 'close all but this' menu item to tab right click
(DONE): Add 'save' menu item to tab right click	
(DONE): Add 'close all tabs' menu item to tab right click
(DONE): Add 'close other tabs' menu item to tab right click	
(DONE): Should save the locations of the toolstrips on the mainform	
(DONE): New Project code implementation
	
	
For 2.1 and beyond
-----------
- Rename 
	* NAntDocument NAntGuiDocument
	* IBuildScript IScriptParser
	* NAntBuildScript NAntScriptParser	
- Figure out if there is a way to override the default behavior of the xmleditor sharpdevelop control to allow drag and drop of
  documents into an existing document. By default it will allow drag and drop of text, but with the drag-enter method it should be able 
  to handle different results for different dragged objects (text vs file)
- Dynamic help in the text editor with NAnt
- Find and replace
- Create options for LineNumbers, Folding, TabSpaces, etc...
- Consider using the Application.Idle event to update the display (enabled/disabled menu items and buttons) like Greg.XmlEditor, his code is not a tangled mess
- New NAnt project needs to be parsed and title should be Untitled*
- Port NAnt-Gui to SharpDevelop.Core?  Would thereby eleminate the need to use the text editor 
  control.  Would give access to syntax highlighting, code completion, add-in architecture, 
  find/replace dialog, etc...
- CODE Generation
	* Need to recurse and fill in the body of elements with sequences/choices
	* Create required attributes
	* How to implement file picker for filenames?
		- by file or dir on the end of the attribute?
	* What about booleans and other values?
	* How to determine if end tag is required	
	* Consider doing like NAntPad and creating a specific XSD that is easier to generate code from (supports bool, file and dir types)
- Rewrite the parser so that the location of elements is known
	* Add loadfile parsing
	* Add sysinfo parsing
	* Add regex parsing
	* Right-click target in tree view gives option to "Go to Target"
- Add a property window to change nant settings after nant-gui is loaded
- Add on the fly parsing back in (need to suppress parsing errors and allow an unsaved document to be parsed)
- Put save of buildfiles into THREADS (More difficult than it first appears)
- Create custom commandline options that make sense for msbuild, nant, and multiple tabs
	* Associate command line options for each file
- Validate build files 
	* show errors in an error window like VS.Net show errors
- Add basic MSBuild support



