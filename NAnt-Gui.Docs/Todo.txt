Required for 1.9/2.0
--------------------
- Saving the document changes which targets are selected
- Fix all UI events.  
	* Reload should be disabled when a new document is created	
	* If no documents are opened, close, save, save as, and reload should be disabled
- Filewatcher 
	* should do something when the file is deleted
	* should prompt the user, when the file changes, if they want to reload it (mark it as unsaved when they decline)
	* create it in the controller and pass it into the NAntDocument.  The window isn't the right place for it, but it's there
	  because it needs a control to synchronize the threading
- Should save the locations of the toolstrips on the mainform	
- Figure out why folding and tabcompletion don't work on the xmlcontrol
- Rename 
	* NAntDocument NAntGuiDocument
	* IBuildScript IScriptParser
	* NAntBuildScript NAntScriptParser	
- New Project code implementation
- Multiple tabs:	
	* Add 'close all tabs' menu item to tab right click
	* Add 'close other tabs' menu item to tab right click	
	* Add save all menu item and toolstrip button
	* Window menu that lists all open tabs
- Update website to show that NAnt-Gui runs in .Net 2.0

	
For 2.1 and beyond
-----------
- Figure out if there is a way to override the default behavior of the xmleditor sharpdevelop control to allow drag and drop of
  documents into an existing document. By default it will allow drag and drop of text, but with the drag-enter method it should be able 
  to handle different results for different dragged objects (text vs file)
- Dynamic help in the text editor with NAnt
- New Project screen (fix up Stencil and use it to generate project from template)
	+ write generator to produce template from XSD for NAnt	
- Find and replace

+ Create options for LineNumbers, Floating, TabSpaces, etc...
+ FOLDING AND COMPLETION
	+ Scintilla does not have folding or completion for XML.  Need to figure out how to get the completion from SharpDevelop into NAnt-Gui
	  Scintilla does have find and replace with regular expressions and other features not in Sharpdevelop text editor control
	+ Determine if Scintilla.Net would be a better editor, if not figure out how to get code completion
+ Consider using the Application.Idle event to update the display (enabled/disabled menu items and buttons) like Greg.XmlEditor, his code is not a tangled mess
+ New NAnt project needs to be parsed and title should be Untitled*
+ Port NAnt-Gui to SharpDevelop.Core?  Would thereby eleminate the need to use the text editor 
  control.  Would give access to syntax highlighting, code completion, add-in architecture, 
  find/replace dialog, etc...

+ CODE Generation
	+ Need to recurse and fill in the body of elements with sequences/choices
	+ Create required attributes
	+ How to implement file picker for filenames?
		- by file or dir on the end of the attribute?
	+ What about booleans and other values?
	+ How to determine if end tag is required	
	+ Consider doing like NAntPad and creating a specific XSD that is easier to generate code from (supports bool, file and dir types)
+ /CODE Generation  

**** Should the parser be rewritten to use a looping reading style? ****
+ Add loadfile parsing
+ Add sysinfo parsing
+ Add regex parsing
**** /Should the parser be rewritten to use a looping reading style? ****
	* Enable drag and drop reordering of tabs (PROBABLY NOT GOING TO BE ABLE TO DO THIS BECAUSE
	  MAGICLIBRARY ISN'T SO MAGICAL.  NO EASY WAY TO ENABLE THIS)
+ Add a property window to change nant settings after nant-gui is loaded
+ Add on the fly parsing back in (need to suppress parsing errors and allow an unsaved document to be parsed)
+ Put save of buildfiles into THREADS (More difficult than it first appears)
+ Put load and save of buildfiles into threads
+ Create custom commandline options that make sense for msbuild, nant, and multiple tabs
	* Associate command line options for each file
+ Right-click target in tree view gives option to "Go to Target"
+ Code completion
+ Validate build files 
	* show errors in an error window like VS.Net show errors

+ Add basic MSBuild support

2.0.0:
(DONE): Unsaved/New document should prompt for save on close of the app
(DONE): Unsaved/New document should prompt for save when the X on the dockpanel is clicked
(DONE): In general, reloading the document changes the cursor to 1,1
(DONE): Saving a file reloads it, which moves the cursor to 1,1
(DONE): Should only save the document, when running it, if it has changes
(DONE): Move SourceFile into NAntDocument, put the filesystem watcher on the DocumentWindow, 
		and remove all the save, saveas and load methods from NAntDocument
(DONE): Try to remove some of the redundant event handlers and use anonymous delegates instead	
(DONE): Add in a filewatcher for each file
(DONE): Undo and redo should be disabled if the document has nothing to undo/redo, enabled otherwise
(DONE): When the document changes, the undo/redo button states should be updated
(DONE): Loading the app twice shouldn't throw an 'Build file not found - [blank] was not found.'
(DONE): Thread the parsing of the build scripts on load
(DONE): Figure out if drag&drop not working on the actual documents is a limitation of the texteditor control (it is, you can drag and drop text and it is pasted)
(DONE): Ensure that drag&drop works on output, properties and targets windows too
(DONE): Bug: load app hit control-v, watch it crash
(DONE): Save the WordWrap state to the Settings class
(CANT): Make WordWrap Editor work (Not supported in the xmleditor control)
(DONE): Fix Dock settings being loaded on start
(DONE): Ensure that double-clicking a .build file makes it load in the app if the app is already loaded (as far as I can figure the commandline arguments are being overridden by the by the dockpanel.LoadXML)
(DONE): Make loading load all the previously loaded documents an option
(DONE): Store open files in settings and when NAnt-Gui is loaded, load all the previously loaded
(DONE): Fix Dock settings being loaded on start
(DONE): Split Word Wrap into WordWrap Output and WordWrap Editor
(DONE): Ensure that drag&drop works on the form
(DONE): Selecting different tabs doesn't update the property and target windows
(DONE): If you open a document, close it, then open it again the app crashes
(DONE): I think the maincontroller and the dockpanel need to be tied together.  If the document was put
  in the document window then the main controller wouldn't have to keep track of the selected document and 
  window.  The dock panel already keeps track of the "active document" or active tab.  Might need to be 
  restructured
(DONE): Move DockingConfig to the user folder instead of the application folder  
(DONE): Need right-click context menu in text editor
(DONE): Implement IEditControls on xmlcontrol (because scripteditor was removed)
(DONE): Hide Editor property in DocumentWindow.  Fully ecapsulate it.
(DONE): Add WinFormsUI docking to replace MagicLibrary	
(DONE): Use Microsoft.VisualBasic.ApplicationServices to allow multiple files to open 
(DONE): Fix the build file because it doesn't work with <solution> anymore
(DONE): Allow only one instance of NAnt-Gui to load
(DONE): Allow additional files that are double-clicked to load in a new tab
(DONE): Converted ToolBar to ToolStrip
(DONE): Converted Main Menu to MenuStrip
(DONE): Converted StatusBar to StatusStrip
(DONE): Converted Context Menus to MenuStrip
(DONE - Already in there):  Write in documentation about having to copy the nant bin directory files to the NAnt-Gui Debug directory
(DONE): Change New to New flyout with New blank file and New NAnt Project
(DONE): Figure out how to get the tag completion (ie: type <wak> and </wak> appears) from Greg.XmlEditor
(DONE): Figure out why the folding doesn't work and completion
(DONE): Fix window settings being saved on exit and loaded on start

1.5.0:
(DONE): Change the way that NAntBuildScript.cs:LoadNonProjectProperty:134 works.  Right now it adds all
  properties from the Gui regardless of whether the property's value has change.  Only propertys 
  with changed values should be added.
(DONE): Clean up how property bag works.  AKA, the events should change the values of the properties and
  the Tag property of the propertyspec class can be removed as you don't need to store the actual 
  nant property in the propertybag.properties collection
(DONE): Multiple Tabs
	* Adjust right-click context menu on tabs so it only shows on tabs
	* Only allow one copy of a file to be loaded at a time
(DONE): Made sure NAnt-Gui works with .Net 2.0
(DONE): Reorder projects.  Add a Gui project and move the UI code into it
(CANCELLED: Didn't work): Modify the app.config file so that it points to the nant directory, then 
	modify the app and installer so that it loads the tasks from the nant directory instead of 
	having to have the nant bin directory copied into the nant-gui bin directory
(CANCELLED: SLiNgshoT is deprecated): Add SLiNgshoT tool window to tools menu

1.4.0:
(DONE) New build file functionality (test to make sure save, reload, build, either work, or ignored on new files)

PRE 1.4.0:
(DONE) Switch output windows to fixed-width font so NAnt output displays accurately
(DONE) Put scroll bars on the editor window
(DONE) Relatively reference nant for the prebuild step so it doesn't have to be in the path
(DONE) View output menuitem
(DONE) icon for output
(DONE) Move Menus into separate files
(DONE) Write MainFormMediator
(DONE) Enable drag and drop on the editor and tabs
(DONE) Fix copy and paste menu items (they only operate on text in the output window)
(CANCELLED: Non-standard behaviour) Add drag and drop text into the editor
(DONE) Make stop build menu item
(DONE) Hookup output and tabcontrol to mediator so it always knows which has focus for copy, wordwrap, paste, etc...
(DONE) Add cut, paste, and delete menuitems (diabled when output box has focus)
(DONE) Add copy, paste, undo, redo icons
(DONE) Create save output default initial dir reg key
(DONE) Modify the tab control so that it is hooked up to the tabchange event and figures out the selected tab then instead of always searching for the selected tab)